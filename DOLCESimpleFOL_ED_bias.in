
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ONTOLOGY OF OBSERVATIONS AND BIAS
%version for MACE4 / PROVER9

%Developed by Daniele Porello with Roberta Ferrario, Emanuele Bottazzi, Ciro de Florio, Mattia Fumagalli

%The ontology uses the theory of endurants, an excerpt of DOLCESimple, a simplified version of DOLCE.
%For DOLCESimple, see https://github.com/appliedontolab/DOLCE.
%We add the theory of observations, inferences, and biases.
%The restriction to the DOLCE theory of endurants is motivated to obtain populated models of the theory.
%The theory is proved consistent using mace4. Moreovever, each new class of the theory is populated with some instances. 




set(prolog_style_variables).

assign(max_megs, 2000).  %%to use for lareger model.

formulas(assumptions).


%Taxonomy%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Taxonomy: inclusions
(all X ((ab(X) | ed(X) | pd(X) | q(X)) <-> pt(X))).
(all X ((as(X) | nped(X) | ped(X)) <-> ed(X))).
(all X ((pro(X) | st(X)) <-> stv(X))).
(all X ((ev(X) | stv(X)) <-> pd(X))).
(all X ((aq(X) | pq(X) | tq(X)) <-> q(X))).
(all X ((acc(X) | ach(X)) <-> ev(X))).
(all X ((apo(X) | napo(X)) <-> pob(X))).
(all X ((sag(X) | sc(X)) <-> aso(X))).
(all X ((aso(X) | naso(X)) <-> sob(X))).
(all X ((sob(X) | mob(X)) <-> npob(X))).
(all X ((ar(X) | pr(X) | tr(X)) <-> r(X))).
(all X (r(X) -> ab(X))).
(all X ((f(X) | m(X) | pob(X)) <-> ped(X))).
(all X (npob(X) -> nped(X))).
(all X (s(X) -> pr(X))).
(all X (sl(X) -> pq(X))).
(all X (t(X) -> tr(X))).
(all X (tl(X) -> tq(X))).

(all X (c(X) -> naso(X))).

%Taxonomy: disjoitness

(-(exists X (ab(X) & ed(X)))).
(-(exists X (ab(X) & pd(X)))).
(-(exists X (ab(X) & q(X)))).
(-(exists X (ed(X) & pd(X)))).
(-(exists X (pd(X) & q(X)))).
(-(exists X (ed(X) & q(X)))).
(-(exists X (ped(X) & nped(X)))).
(-(exists X (ped(X) & as(X)))).
(-(exists X (nped(X) & as(X)))).
(-(exists X (m(X) & f(X)))).
(-(exists X (f(X) & pob(X)))).
(-(exists X (m(X) & pob(X)))).
(-(exists X (mob(X) & sob(X)))).
(-(exists X (aso(X) & naso(X)))).
(-(exists X (sag(X) & sc(X)))).
(-(exists X (apo(X) & napo(X)))).
(-(exists X (ev(X) & stv(X)))).
(-(exists X (ach(X) & acc(X)))).
(-(exists X (st(X) & pro(X)))).
(-(exists X (tq(X) & pq(X)))).
(-(exists X (pq(X) & aq(X)))).
(-(exists X (tq(X) & aq(X)))).
(-(exists X (tr(X) & pr(X)))).
(-(exists X (pr(X) & ar(X)))).
(-(exists X (tr(X) & ar(X)))).




%Mereology%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y (p(X,Y) -> ((ab(X) | pd(X)) & (ab(Y) | pd(Y))))) # label(parthood_Argument_restrictions_Ad1).
(all X all Y (p(X,Y) -> (pd(X) <-> pd(Y)))) # label(parthood_argument_restrictions_Ad2).
(all X all Y (p(X,Y) -> (ab(X) <-> ab(Y)))) # label(parthood_argument_restrictions_Ad3).
(all X all Y (p(X,Y) -> (t(X) <-> t(Y)))) # label(parthood_argument_restrictions_instance_of_Ad4_1).
(all X all Y (p(X,Y) -> (s(X) <-> s(Y)))) # label(parthood_argument_restrictions_instance_of_Ad4_2).
(all X all Y (p(X,Y) -> (ar(X) <-> ar(Y)))) # label(parthood_argument_restrictions_instance_of_Ad4_3).
(all X ((ab(X) | pd(X)) -> p(X,X))) # label(parthood_reflexivity_Ad5).
(all X all Y ((p(X,Y) & p(Y,X)) -> ((X)=(Y)))) # label(parthood_antysymmetry_Ad6).
(all X all Y all Z((p(X,Y) & p(Y,Z)) -> p(X,Z))) # label(parthood_transitivity_Ad7).
(all X all Y (pp(X,Y) <-> (p(X,Y) & -(p(Y,X))))) # label(proper_part_definition_Dd14).
(all X all Y (ov(X,Y) <-> (exists Z (p(Z,X) & p(Z,Y))))) # label(overlap_definition_Dd15).
(all X (at(X) <-> ((pd(X) | ab(X)) & -(exists Y (pp(Y,X)))))) # label(atom_definition_Dd16_corrected).
(all X all Y (atp(X,Y) <-> (p(X,Y)& at(X)))) # label(atomic_part_definition_Dd17).

(all X all Y all Z (sum(Z,X,Y) <-> (((ab(Z) & ab(X) & ab(Y)) | (pd(Z) & pd(X) & pd(Y))) & (all W (ov(W,Z) <-> (ov(W,X) | ov(W,Y))))))) # label(binary_sum_definition_Dd18).


%Check without this for larger models:
%(all X all Y ((ab(X) & ab(Y)) -> (exists Z (ab(Z) & sum(Z,X,Y))))) # label(binary_sum_existence_restriction_of_Ad9).
%(all X all Y ((pd(X) & pd(Y)) -> (exists Z (pd(Z) & sum(Z,X,Y))))) # label(binary_sum_existence_restriction_of_Ad9).

%(all X all Y all Z (dif(Z,X,Y) <-> (((ab(Z) & ab(X) & ab(Y)) | (pd(Z) & pd(X) & pd(Y))) & (all W (p(W,Z) <-> (p(W,X) & -(ov(W,Y)))))))) # label(binary_difference_definition).

%(all X all Y ((ab(X) & ab(Y) & -(p(X,Y))) -> (exists Z (dif(Z,X,Y))))) # label(binary_difference_existence_from_Ad8_1).
%(all X all Y ((pd(X) & pd(Y) & -(p(X,Y))) -> (exists Z (dif(Z,X,Y))))) # label(binary_difference_existence_from_Ad8_2).


%Present_at%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X (ed(X) -> (exists T (pre(X,T))))) # label(present_at_ed).


(all X all T (pre(X,T) -> ((ed(X) | pd(X) | q(X)) & t(T)))) # label(present_at_partial_definition_Dd40).
(all X all T all S ((pre(X,T) & p(S,T)) -> (pre(X,S)))) # label(present_at_dissectivity_Td17).
(all X all Y all T ((pre(X,T) & p(X,Y)) -> pre(Y,T))) # label(present_at_part_of_Ad13).



%Temporary_parthood%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y all T (tp(X,Y,T) -> (ed(X) & ed(Y) & t(T)))) # label(temporary_parthood_argument_restrictions_Ad10).

(all X all Y all T (tp(X,Y,T) & ped(Y) -> ped(X))) # label(temporary_parthood_argument_restrictions_Ad11_revised).
(all X all Y all T (tp(X,Y,T) & nped(Y) -> nped(X))) # label(temporary_parthood_argument_restrictions_Ad12_revised).

(all X all Y all Z all T ((tp(X,Y,T) & tp(Y,Z,T)) -> tp(X,Z,T))) # label(temporary_parthood_transitivity_Ad13).
(all X all T ((ed(X) & pre(X,T)) -> tp(X,X,T))) # label(temporary_parthood_reflexivity_Ad16).
(all X all Y all T (tov(X,Y,T) <-> (exists Z (tp(Z,X,T) & tp(Z,Y,T))))) # label(temporary_overlap_definition_Dd21).

%(all X all Y all T (tpp(X,Y,T) <-> (tp(X,Y,T) & (-tp(Y,X,T))))) # label(temporary_proper_part_definition_Dd20).

(all X all Y all T (tpp(X,Y,T) <-> (tp(X,Y,T) & -(X=Y)))) # label(temporary_proper_part_definition_weaker_than_Dd20).

%(all X all Y all T (ed(X) & ed(Y) & pre(X,T) & pre(Y,T) & (-tp(X,Y,T)) -> (exists Z (ed(Z) & tp(Z,X,T) & (-tov(Z,Y,T)))))) # label(temporary_proper_part_supplementation_Ad14).

(all X all Y all T ((ped(X) & ped(Y) & pre(X,T) & pre(Y,T) & (-tp(X,Y,T))) -> (exists Z (ped(Z) & tp(Z,X,T) & (-tov(Z,Y,T)))))) # label(temporary_proper_part_supplementation_Ad14).
(all X all Y all T ((nped(X) & nped(Y) & pre(X,T) & pre(Y,T) & (-tp(X,Y,T))) -> (exists Z (nped(Z) & tp(Z,X,T) & (-tov(Z,Y,T)))))) # label(temporary_proper_part_supplementation_Ad14).
%Check_without_it_for_larger_models

(all X all Y all T (tp(X,Y,T) -> (pre(X,T) & pre(Y,T)))) # label(temporary_parthood_Ad17).
(all X all Y all T (tp(X,Y,T) -> (all S (p(S,T) -> tp(X,Y,S))))) # label(temporary_parthood_Ad18).


(all X all T (tat(X,T) <-> (ed(X) & t(T) & -(exists Y (tpp(Y,X,T)))))) # label(temporary_proper_part_definition_Dd22_corrected).
(all X all Y all T (tatp(X,Y,T) <-> (tp(X,Y,T) & tat(X,T)))) # label(temporary_atomic_part_definition_Dd23).



(all X all Y all Z all T (sumt(Z,X,Y,T) <-> (pre(Z,T) & pre(X,T) & pre(Y,T) & ed(Z) & ed(X) & ed(Y) & (all W (tov(W,Z,T) <-> (tov(W,X,T) | tov(W,Y,T))))))) # label(temporary_sum_definition_from_Dd26).


%Participation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y all T (pc(X,Y,T) -> (ed(X) & pd(Y) & t(T)))) # label(participation_argument_restrictions_Ad33).

%(all X all T ((pd(X) & pre(X,T)) -> (exists Y (pc(Y,X,T))))) # label(participation_existential_Ad34).

%(all X (ed(X) -> (exists Y exists T (pc(X,Y,T))))) # label(participation_existential_Ad35_corrected).

(all X all Y all T (pc(X,Y,T) -> (pre(X,T) & pre(Y,T)))) # label(participation_present_Ad36).

(all X all Y all T (pc(X,Y,T) -> (all S (p(S,T) -> pc(X,Y,S))))) # label(participation_present_Ad37).




%Specific_constant_dependence%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X all Y (sd(X,Y) <-> ((exists T (pre(X,T))) & (all T (pre(X,T) -> pre(Y,T)))))) # label(specific_dependence_Dd69).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CLASSIFICATION, CONCEPTS

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y all T (cf(X,Y,T) -> (c(Y) & t(T)))) # label(classification_argument_restrictions_a11).
(all X all Y all T (cf(X,Y,T) -> (pre(X,T)))) # label(classification_present_a12).
(all X all Y all T (cf(X,Y,T) -> -(cf(Y,X,T)))) # label(classification_a14).
(all X all Y all T ((cf(X,Y,T) & cf(Y,Z,T)) -> -(cf(X,Z,T)))) # label(classification_a15).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%OBSERVATIONS

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X (ob(X) -> naso(X))).
(all X (cob(X) -> naso(X))).
%(all X (bob(X) -> ob(X))).
%(all X (inf(X) -> ob(X))).
(-(exists X (c(X) & ob(X)))).
(-(exists X (ob(X) & cob(X)))).
(-(exists X (bob(X) & inf(X)))).


(all X (bob(X) <-> (ob(X) & all T (t(T) -> -(exists Y (ob(Y) & tpp(Y,X,T)))))))  # label(bob_atomic).

(all Z (cob(Z) -> (exists X exists Y exists T (-(X=Y) & bob(X) & (bob(Y) | cob(Y)) & sumt(Z,X,Y,T))))).

(all X (bob(X) <-> (ob(X) & (exists A exists O exists C exists T (hasAgent(X,A) & hasObject(X,O) & hasConcept(X,C) & hasTime(X,T)))))).

(all X (inf(X) <-> (ob(X) & (exists A exists S exists T exists T1 (hasAgent(X,A) & hasSource(X,S) & hasTarget(X,T)))))).

(all X all A (hasAgent(X,A) -> (ob(X) & (aso(A) | apo(A))))).
(all X all S (hasSource(X,S) -> (inf(X) & (bob(S) | cob(S))))).
(all X all T (hasTarget(X,T) -> (inf(X) & bob(T)))).

(all X all O (hasObject(X,O) -> (bob(X) & ed(O)))).
(all X all Y (hasConcept(X,Y) -> (bob(X) & c(Y)))).
(all X all T (hasTime(X,T) -> (bob(X) & t(T)))).


(all X all A all A1 (hasAgent(X,A) & hasAgent(X,A1) -> A=A1)).
(all X all O all O1 (hasObject(X,O) & hasObject(X,O1) -> O=O1)).
(all X all C all C1 (hasConcept(X,C) & hasConcept(X,C1) -> C=C1)).
(all X all T all T1 (hasTime(X,T) & hasTime(X,T1) -> T=T1)).

(all X all S all S1 (hasSource(X,S) & hasSource(X,S1) -> S=S1)).
(all X all T all T1 (hasTarget(X,T) & hasTarget(X,T1) -> T=T1)).



(all B all B1 all A all O all C all T ((hasAgent(B,A) & hasObject(B,O) & hasConcept(B,C) & hasTime(B,T) &
hasAgent(B1,A) & hasObject(B1,O) & hasConcept(B1,C) & hasTime(B1,T)) ->  (B=B1))) # label(identity_for_bob).


(all P all S all TR ((inf(P) & hasSource(X,S) & hasTarget(X,TR)) -> (all T (pre(P,T) -> pre(S,T) & pre(TR,T))))) # label(inference_presence).


%(all P all P1 all A all S all T all T1 ((hasAgent(P,A) & hasSource(P,S) & hasTarget(P,T)
%hasAgent(P1,A) & hasSource(P1,S) & hasTarget(P1,T)) -> (P=P1))) # label(identity_for_inf).



%function symbols

(all X all Y (ob(X) & (aso(Y) | apo(Y)) & (age(X)=Y) <-> hasAgent(X,Y))).
(all X all Y (bob(X) & ed(Y) & (obj(X)=Y) <-> hasObject(X,Y))).
(all X all Y (bob(X) & c(Y) & (cnc(X)=Y) <-> hasConcept(X,Y))).
(all X all Y (bob(X) & t(Y) & (tim(X)=Y) <-> hasTime(X,Y))).

(all X all Y (inf(X) & (cob(Y) | bob(Y)) & (sr(X)=Y) <-> hasSource(X,Y))).
(all X all Y (inf(X) & bob(Y) & (ta(X)=Y) <-> hasTarget(X,Y))).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%BIAS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X (b(X) -> c(X))).
(all X (b(X) -> (exists P exists T (inf(P) & t(T) & cf(P,X,T))))).

(all X all Y (requires(X,Y) -> c(X) & c(Y))).
%(all X all Y (requires(X,Y) -> (all Z all T (cf(Z,X,T) -> cf(Z,Y,T))))).

(all X all T (c(c2) & c(c2n) -> (-(cf(X,c2,T)) <- (cf(X,c2n,T))))).


%Kahnemann bias%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Kahnemann bias with concepts c1 and c2 and agent i

(all P all T (cf(P,bkic1c2,T) <->
((pre(P,T) & age(P)=i & exists O1 (cnc(O1)=c1 & tp(O1,sr(P),T)) & cnc(ta(P))=c2 & obj(ta(P))=x1))
&
(all P1 ((age(P1)=i & exists O1 (exists O2 (cnc(O1)=c1 & cnc(O2)=cr & tp(O1,sr(P1),T) & tp(O2,sr(P1),T))) & cnc(ta(P1))=c2))
-> obj(ta(P1))=x1))
&
all P2 ((age(P2)=i & (-(exists O1 (cnc(O1)=c1 & tp(O1,P2,T)) & cnc(ta(P2))=c2n) -> obj(ta(P2))=x1))
)).





%Sampling bias%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%Sampling bias with concept c1 and agent i because of lacking objects of type cl, e.g. obj11 obj22, from the source (bsic2lf)


(all P all T (cf(P,bsic2lo,T) <->
(age(P)=i & cnc(ta(P))=c2 & pre(P,T) & (all O1 (cf(obj(O1),cl,T) -> -(tp(O1,sr(P),T)))))
)).



%Specification bias%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%Specification bias with concept c2 and agent i because of lacking cr (bspic2)

(all P all T (cf(P,bspic1,T) <->
(age(P)=i & cnc(ta(P))=c2 & pre(P,T) & (all O1 ((hasConcept(O1,cr2)) -> -(tp(O1,sr(P),T)))))
)).

%%Specification bias with concept c2 because of lacking a class of concepts cl (bspc2)

(all P all T (cf(P,bspic2,T) <-> (pre(P,T) & cnc(ta(P))=c2 & ((all O1 all X ((hasConcept(O1,X) & cf(X,cl,T)) -> -(tp(O1,sr(P),T))))
)))).


%%Specification bias with concept c1 and agent i because of using concepts of class cl11.

(all P all T (cf(P,bspic3,T) <-> (pre(P,T) & cnc(ta(P))=c2 &
((exists O1 ((hasConcept(O1,c11) & cf(c11,cl11,T) & tp(O1,sr(P),T))))
)))).


(all P all T (cf(P,bspic4,T) <->
(pre(P,T) & age(P)=i & cnc(ta(P))=c2 &
cf(c2,cl2,T) & (all O1 all X ((tp(O1,P,T) & hasConcept(O1,X))-> cf(X,cl11,T)))))).



%Inductive bias%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%Inductive bias with agent i concept c1 (bic2) (augmenting the source)

(all P all T (cf(P,bic2,T) <->
(pre(P,T) & age(P)=i & cnc(ta(P))=c2 & obj(ta(P))=x1
& (exists P2 (pre(P2,T) & ag(P2)=i & tp(sr(P),sr(P2),T) & (cnc(ta(P2))=c2n) & obj(ta(P2))=x1))))).


%%Inductive bias with agent i concept c1 (bic2cr)  (i fails even with the requirements)

(all P all T (cf(P,bic2cr,T) <->
(pre(P,T) & age(P)=i & cnc(ta(P))=c2 & obj(ta(P2))=x1
&
(exists P2 (exists O1 (pre(P2,T) & ag(P2)=i & tp(O1,sr(P2),T) & hasConcept(O1,cr) & (cnc(ta(P2))=c2n) & obj(ta(P2))=x1))))
)).

%%Inductive bias with agent i concept c1 (bic2t)  (i fails at different times)

(all P all T (cf(P,bic2t,T) <->
(pre(P,T) & age(P)=i & cnc(ta(P))=c2 & obj(ta(P))=x1
& exists P2 (exists T1 (pre(P2,T1) & age(P2)=i & obj(ta(P2))=x1 & cnc(ta(P2))=c2n & sr(P2)=sr(P)))))).


%Deployment bias%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all P all T (cf(P,bdx1,T) <->
(pre(P,T) & cnc(ta(P))=c2 & obj(ta(P))=x1 & cf(x1,cl1,T) & cl1!=cl2 &
(all O all X (tp(O,sr(P),T) & hasObject(O,X)) -> (cf(X,cl2,T)))))).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Instantiated_classes_and_relations:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



bob(b1) & hasAgent(b1,ag1) & hasObject(b1,o1) & hasConcept(b1,co1) & hasTime(b1,t1).
age(b1)=ag1 & obj(b1)=o1 & cnc(b1)=c1 & tim(o1)=t1.
cob(cob1) & tpp(b1,cob1,t1) & tpp(b3,cob1,t1) & -(b1=b3) & bob(b3).
naso(cob1).

inf(p1) & hasAgent(p1,ag1) & hasSource(p1,s1) & hasTarget(p1,tr1).
inf(p2) & hasAgent(p2,ag1) & hasSource(p2,s2) & hasTarget(p2,tr2).
inf(p3) & hasAgent(p3,ag1) & hasSource(p3,s3) & hasTarget(p3,tr3).
inf(p4) & hasAgent(p4,ag1) & hasSource(p4,s4) & hasTarget(p4,tr4).
inf(p5) & hasAgent(p5,ag1) & hasSource(p5,s5) & hasTarget(p5,tr5).
inf(p6) & hasAgent(p6,ag1) & hasSource(p6,s6) & hasTarget(p6,tr6).
inf(p7) & hasAgent(p7,ag1) & hasSource(p7,s7) & hasTarget(p7,tr7).

b(bkic1c2).
b(bsic2lo).
b(bsc2lo).
b(bspic1).
b(bspic2).
b(bspic3).
b(bspic4).
b(bic2).
b(bic2cr).
b(bic2t).
b(bdx1).

cf(p1,bkic1c2,t1).
cf(p2,bsic2lo,t1).
cf(p2,bsc2lo,t1).
cf(p3,bspic1,t1).
cf(p3,bspic2,t1).
cf(p4,bspic3,t1).
cf(p4,bspic4,t1).
cf(p4,bic2,t1).
cf(p5,bic2cr,t1).
cf(p6,bic2t,t1).
cf(p7,bdx1,t1).




end_of_list.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%formulas(goals).
%Insert theorems to prove


%end_of_list.
